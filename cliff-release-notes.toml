# git-cliff configuration for GitHub release notes generation
# Optimized for user-friendly, marketing-style release announcements

[changelog]
header = ""
body = """
## {% if version %}{{ version | trim_start_matches(pat="v") }}{% else %}Unreleased{% endif %} - {{ timestamp | date(format="%Y-%m-%d") }}

{% for group, commits in commits | group_by(attribute="group") %}
### {{ group }}
{% for commit in commits | unique(attribute="message") %}
- {% if commit.breaking %}⚠️ **BREAKING**: {% endif %}\
{{ commit.message | upper_first }}\
{% if commit.github.username %} (by @{{ commit.github.username }}){% endif %}
{% endfor %}

{% endfor %}
---
**Full Changelog**: https://github.com/Eon-Labs/rangebar/compare/{{ previous.version }}...{{ version }}
"""
footer = ""
trim = true

[git]
conventional_commits = true
filter_unconventional = false
split_commits = false
tag_pattern = "v[0-9]*"
tag_prefix = "v"
skip_tags = ""
ignore_tags = ""

[[git.commit_parsers]]
# Breaking changes (most prominent)
message = "^.*!:"
group = "⚠️ Breaking Changes"

[[git.commit_parsers]]
body = ".*BREAKING[- ]CHANGE.*"
group = "⚠️ Breaking Changes"

# Features (user-facing semantic grouping)
[[git.commit_parsers]]
message = "^feat\\(sanitization\\)"
group = "🧹 Codebase Sanitization"

[[git.commit_parsers]]
message = "^feat\\(security\\)"
group = "🔒 Security Enhancements"

[[git.commit_parsers]]
message = "^feat\\(perf\\)"
group = "🚀 Performance Improvements"

[[git.commit_parsers]]
message = "^feat\\(deps\\)"
group = "📦 Dependency Management"

[[git.commit_parsers]]
message = "^feat"
group = "✨ New Features"

# Fixes (user-impacting only)
[[git.commit_parsers]]
message = "^fix\\(security\\)"
group = "🔒 Security Fixes"

[[git.commit_parsers]]
message = "^fix\\(perf\\)"
group = "🚀 Performance Fixes"

[[git.commit_parsers]]
message = "^fix"
group = "🐛 Bug Fixes & Improvements"

# Infrastructure (consolidated)
[[git.commit_parsers]]
message = "^(fix|feat)\\(ci\\)"
group = "🔧 Infrastructure & CI/CD"

[[git.commit_parsers]]
message = "^(fix|feat)\\(fmt\\)"
group = "🔧 Infrastructure & CI/CD"

[[git.commit_parsers]]
message = "^(fix|feat)\\(clippy\\)"
group = "🔧 Infrastructure & CI/CD"

# Skip non-user-facing commits (chore, docs, test, etc.)
[[git.commit_parsers]]
message = "^chore"
skip = true

[[git.commit_parsers]]
message = "^docs"
skip = true

[[git.commit_parsers]]
message = "^test"
skip = true

[[git.commit_parsers]]
message = "^build"
skip = true

[[git.commit_parsers]]
message = "^ci"
skip = true

[[git.commit_parsers]]
message = "^style"
skip = true

[[git.commit_parsers]]
message = "^refactor"
skip = true

# Catch-all for anything else
[[git.commit_parsers]]
message = ".*"
group = "📝 Other Changes"

[[git.commit_preprocessors]]
# Remove gitmoji to avoid duplication with our emoji groups
pattern = ':\w+:'
replace = ""

[[git.commit_preprocessors]]
# Clean up extra whitespace
pattern = '\s+'
replace = " "
